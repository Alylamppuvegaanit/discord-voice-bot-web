const express = require('express');
const cors = require('cors')
const fs = require('fs');
const bodyParser = require('body-parser')
require('dotenv').config();


var jsonParser = bodyParser.json()
const app = express();
app.use(cors());

// Key for authentication. This should be generated by backend and used on all edit requests, to prevent unauthorized access
const KEY = process.env.SECRET_KEY;

// Read data file
fetchPersistent = () => {
  try {
    // Read data synchronously
    return fs.readFileSync("data/playlists.json", "utf8");
  } catch {
    return [];
  }
}


// Write changes to data file
writePersistent = (data) => {
  try {
    // Read data synchronously
    fs.writeFileSync("data/playlists.json", data)
    return true;
  } catch {
    return false;
  }
}


// Helper for checking the authentication key
authenticateUser = (key) => {
  if (key !== KEY) {
    return false;
  }
  return true;
}


// Entrypoint for getting saved playlists
app.get("/fetch_data", (req, res) => {
  res.setHeader("Content-Type", "application/json");
  return res.send(fetchPersistent());
});


// Entrypoint for updating the song list of a playlist
app.post("/playlist_update", jsonParser, (req, res) => {
  if (!authenticateUser(req.body.key)) {
    return res.send({ updated: false });
  }

  // Vars for saving new song data to persistent storage
  let targetPlaylistID = req.body.playlistID;
  let updatedSongs = req.body.playlistSongs;
  let savedPlaylistData = JSON.parse(fetchPersistent());

  console.log("--> Updating playlist " + targetPlaylistID);

  // Update the song list and write changes to persistent storage
  let targetPlaylistIndex = savedPlaylistData.findIndex(playlist => playlist.id === targetPlaylistID);
  if (savedPlaylistData[targetPlaylistIndex] !== undefined) {
    savedPlaylistData[targetPlaylistIndex].songs = updatedSongs;
  }
  
  writePersistent(JSON.stringify(savedPlaylistData));
});


// Entrypoint for adding a new playlist
app.post("/playlist_add", jsonParser, (req, res) => {
  if (!authenticateUser(req.body.key)) {
    return res.send({ updated: false });
  }

  // Vars for deleting a playlist from persistent storage
  let targetPlaylistID = req.body.playlistID;
  let newSongs = req.body.playlistSongs;
  let savedPlaylistData = JSON.parse(fetchPersistent());

  console.log("--> Adding playlist " + targetPlaylistID);

  // Add a playlist and write changes to persistent storage
  savedPlaylistData.push({ id: targetPlaylistID, songs: newSongs });
  writePersistent(JSON.stringify(savedPlaylistData));
});


// Entrypoint for deleting a playlist
app.post("/playlist_delete", jsonParser, (req, res) => {
  if (!authenticateUser(req.body.key)) {
    return res.send({ updated: false });
  }

  // Vars for deleting a playlist from persistent storage
  let targetPlaylistID = req.body.playlistID;
  let savedPlaylistData = JSON.parse(fetchPersistent());

  console.log("--> Deleting playlist " + targetPlaylistID);

  // Delete a playlist and write changes to persistent storage
  let targetPlaylistIndex = savedPlaylistData.findIndex(playlist => playlist.id === targetPlaylistID);
  savedPlaylistData.splice(targetPlaylistIndex, 1);

  writePersistent(JSON.stringify(savedPlaylistData));
});


// Serve front-end
app.get("/", (req, res) => {
  return res.send("Hello");
});


// Start server
app.listen(20202, () =>
  console.log("--> Server listening"),
);
